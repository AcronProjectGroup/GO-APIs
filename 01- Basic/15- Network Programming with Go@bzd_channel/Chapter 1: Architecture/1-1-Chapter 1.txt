Source: https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)


Distributed Computing Models:
    we could consider the equivalence or the non-equivalence of components of a distributed system.
    می‌توانیم هم ارزی یا عدم هم ارزی اجزای یک سیستم توزیع شده را در نظر بگیریم.

    If both components are equivalent, both able to initiate and to respond to messages, then we have a peer-to-peer system.
    اگر هر دو مؤلفه معادل باشند، هر دو قادر به شروع و پاسخ به پیام‌ها باشند، در این صورت یک سیستم همتا به همتا خواهیم داشت.


    Synchronous Communication: ارتباط همزمان

    Asynchronous Communication: ارتباط ناهمزمان

    Streaming Communication: ارتباط جریانی
        The streaming may need to be handled in real time, may or may not tolerate losses, 
        and can be one-way or allow reverse communication as in control messages.
        پخش جریانی ممکن است نیاز به مدیریت در زمان واقعی داشته باشد، ممکن است تلفات را تحمل کند یا نکند، 
        و می‌تواند یک طرفه باشد یا امکان برقراری ارتباط معکوس را مانند پیام‌های کنترلی فراهم کند.

    Publish/Subscribe: 
        Like Twitter
    
Component Distribution:
    • Presentation component
    • Application logic
    • Data access
    
Gartner Classification: طبقه بندی گارتنر
    1- distributed data
    2- remote data
    3- distributed transaction
    4- remote presentation
    5- distributed presentation

    1- Example: Distributed Database
        Modern mobile phones 
        Google maps is another good example. 

    2- Example: Network File Service
        Gartner classification 2 allows remote clients access to a shared file system
        NFS, Microsoft shares, DCE, etc.

    3- Example: Web 
        Web with Java applets or JavaScript, 
        and CGI scripts or similar (Ruby on Rails, etc.) on the server side.

    4- Example: Terminal Emulation
        This allows a remote system to act as a normal terminal on a local system,
        Telnet

    5- Example: Secure Shell
        The secure shell on UNIX allows you to connect to a remote system, 
        run a command there, and display the presentation locally. 

Three-Tier Models: مدل های سه طبقه

Middleware Model:
    Middleware is the “glue” connecting components of a distributed system. 
    میان افزار "چسب" اجزای اتصال یک سیستم توزیع شده است.

    Components of middleware include the following:
        • The network services such as TCP/IP
        • The middleware layer is application-independent software using the network services
        • Database access
        • Managers of services such as identity
        • Security modules

    Middleware Examples:
        • Primitive services such as terminal emulators, file transfer, and e-mail
        • Basic services such as RPC
        • Integrated services such as DCE (Distributed Computing Environment)
        • Distributed object services such as CORBA and OLE/ActiveX
        • Mobile object services such as RMI and Jini
        • The World Wide Web

    Middleware Functions:
        • Initiation of processes at different computers
        • Session management
        • Directory services to allow clients to locate servers
        • Remote data access
        • Concurrency control to allow servers to handle multiple clients
        • Security and integrity
        • Monitoring
        • Termination of processes, both local and remote

    Continuum of Processing: تداوم پردازش
        The Gartner model is based on a breakdown of 
            an application into the components of presentation, 
            application logic, 
            and data handling. 
        A finer grained breakdown is illustrated in Figure 1-20.


Points of Failure:
    Distributed applications run in a complex environment. 
    This makes them much more prone to failure than standalone applications on a single computer. 
    The points of failure include:
        • Client-side errors
            • The client side of the application could crash
            • The client system may have hardware problems
            • The client’s network card could fail

        • Network errors
            • Network contention could cause timeouts
            • There may be network address conflicts
            • Network elements such as routers could fail
            • Transmission errors may lose messages
        
        • Client-server errors
            • The client and server versions may be incompatible
        
        • Server errors
            • The server’s network card could fail
            • The server system may have hardware problems
            • The server software may crash• The server’s database may become corrupted

Acceptance Factors: عوامل پذیرش
    The acceptance factors of a distributed system are similar to those of a standalone system.
    عوامل پذیرش یک سیستم توزیع شده مشابه عوامل یک سیستم مستقل است.

    • Reliability     قابلیت اطمینان
    • Performance     کارایی
    • Responsiveness  پاسخگویی
    • Scalability     مقیاس پذیری
    • Capacity        ظرفیت
    • Security        امنیت

Transparency: 
    The “holy grails” of distributed systems are to provide the following:
        • Access transparency
        • Location transparency
        • Migration transparency
        • Replication transparency
        • Concurrency transparency
        • Scalability transparency
        • Performance transparency
        • Failure transparency

Access Transparency
    The user should not know (or need to know) if access to all or parts of the system are local or remote.

Location Transparency
    The location of a service should not matter.

Migration Transparency
    If part of the system moves to another location, it should make no difference to a user.

Replication Transparency
    It should not matter if one or multiple copies of the system are running.

Concurrency Transparency
    There should be no interference between parts of the system running concurrently. 
    For example, if I am accessing the database, then you should not know about it.

Scalability Transparency
    It shouldn’t matter if one or a million users are on the system.

Performance Transparency
    Performance should not be affected by any of the system or network characteristics.

Failure Transparency
    The system should not fail. 
    If parts of it fail, the system should recover without the user knowing the failure occurred.

Eight Fallacies of Distributed Computing: هشت اشتباه محاسبات توزیع شده
    1. The network is reliable.
    2. Latency is zero.
    3. Bandwidth is infinite.
    4. The network is secure.
    5. Topology doesn't change.
    6. There is one administrator.
    7. Transport cost is zero.
    8. The network is homogeneous.

Fallacy: The Network Is Reliable مغالطه: شبکه قابل اعتماد است
    about Chinese
    http://www.pcworld.com/article/192658/article.html    

Fallacy: Latency Is Zero
    





















    
    
    

