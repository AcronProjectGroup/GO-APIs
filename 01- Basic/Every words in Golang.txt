in File of Go:
-------------
1.
    variable = var
2. 
    constant = const
    Constants are basically variables whose values cannot be changed later.
3. 
    package main = first executable file main.go
4. 
    func main() {} = every execute files in "package main"
5. 
    fmt = for printing in CLI
6.
    import = for importing another package
7. 
    string
8.
    int = integers
    uint8,  uint16,  uint32,  uint64,int8,  int16,  int32
9.
    byte = uint8
    e.g
10.
    byte = 8 bits, 1024bytes = 1 kilobyte, 1024 kilobytes = 1 megabyte
11.
    rune = uint32
12.
    float32, float64
    Floating Point Numbers. e.g 3.14, 123.541, 100.4020401
13.
    complex64, complex128
14.
    Format String like: fmt.Printf("%v %s %f", variable, string, float32)
15.
    Scope
    Go is lexically scoped using blocks.

16.
    Defining Multiple Variables
17.
    fmt.Scanf("%f", &input)
    We use another function from the fmt package to readthe   user   input   (Scanf).
18.
    for 
    loop
19.
    if
    else
20.
    switch
    default
21.
    array
    An array is a numbered sequence of elements of a sin-gle type with a fixed length.
22.
    value
23.
    range
24.
    len(x)
    length
25.
    slice
    A slice is a segment of an array. Like arrays slices areindexable and have a length. Unlike arrays this lengthis allowed to change.
26.
    make
    f you want to create a slice you should use the built-inmake function
27.
    slice functions:
    append
    add to slice
28.
    [low : high]
    Another way to create slices is to use the [low : high]expression
29.
    map
    A map is an unordered collection of key-value pairs.Also known as an associative array, a hash table or dictionary, maps are used to look up a value by its associated key.

30.
    slices maps 
31.
    delete function
    We can also delete items from a map using the built-indelete function.
32.
    make map
33.
    function
    A function is an independent section of code that mapszero or more input parameters to zero or more outputparameters.   Functions   (also   known   as   procedures   orsubroutines) are often represented as a black box: (theblack box represents the function)
    func FunctionName(ParameterName ParameterType) ReturnType { body of function}
    e.g
    func getUserName(UserInput string) string { return UserInput }
34.
    returning multiple values
    Go is also capable of returning multiple values from afunction
35.
    variadic functions
    func add(args ...int) int {}
36.
    closure
    It is possible to create functions inside of functions
37.
    increment  adds 1 to the variable  x  which is defined inthe  main  function's   scope. 
38.
    return function from a function
39.
    recursion
    Finally a function is able to call itself. Here is one wayto compute the factorial of a number
40.
    defer
    Go has a special statement called defer which schedules a function call to be run after the function completes.
    is often used when resources need to be freed insome way. For example when we open a file we need to make sure to close it later. With defer:
41.
    panic
    the  panicfunction   to   cause   a   run   time   error.  
42.
    recover
    We can handle arun-time panic with the built-in recover function.
    recover stops the panic and returns the value that waspassed to the call to panic.
43.
    Pointers    
    * &
44.
    new
    Another way to get a pointer is to use the built-in newfunction.
45.
    type
    In the provided Go code, "type" is a keyword used to define a new named type or alias. It allows you to create custom types with specific behaviors and characteristics.
    By using the "type" keyword, you can create your own named types or aliases that can be used throughout your code, providing better abstraction and type safety.
46.
    struct
    A struct is a type which contains named fields.
    the keyword structto indicate that we are defining a struct type and alist of fields inside of curly braces.
    Each field has a name and a type. 
    For a struct zero means each of the fields is set to their correspond-ing zero value:
    (0 for ints, 0.0 for floats, "" for strings,nil for pointers, ...)
47.
    new function struct
    e.g:
    c := new(Circle)
    This allocates memory for all the fields,
    sets each of them to their zero value and returns a pointer.
    (*Circle) More often we want to give each of the fieldsa value.
48.
    method
    function receiver VS. function parameter
    The receiver can be of two types: 
    value receiver (func (t T) methodName()) 
    or pointer receiver (func (t *T) methodName()), 
    depending on whether the method modifies the receiver or not. 
49.
    interface
50.
    Concurrency
51.
    Goroutines
52.
    Channels
    chan
53.
    Channel Direction
54.
    Select
    case
55.
    buffered channels
56.
    packages
    creating packages
57.
    testing
58.
    the core packages
59.
    iput / output
    Go's io package.
60.
    files & folders
    To open a file in Go use the Open function from the os package.
61.
    errors
62.
    containers & sort
    Go has several more collections available underneath the container package.
63.
    hashes & cryptography
    Hash functions in Go are broken into two categories:
    cryptographic and non-crypto-graphic.
    The non-cryptographic hash functions can be found underneath the hash package and include adler32, crc32, crc64 and fnv.
64.
    servers
65.
    HTTP servers
66.
    RPC
    The  net/rpc (remote procedure call) 
    and net/rpc/jsonrpc packages provide an easy way to expose methods 
    so they can be invoked over a network. (rather than just in the program running them)
67.
    parsing command line arguments
68.
    synchronization primitives
69.
    Mutexes
    A mutex (mutal exclusive lock) locks a section of code 
    to a single thread at a time and is used to protect 
    shared resources from non-atomic operations.
70.
    



in Command Line Interface Go:
1- go mod init YOUR_NAME
2- go work init YOUR_WORK_DIRECTORY
3- go run main.go  OR  go run projectName.go
